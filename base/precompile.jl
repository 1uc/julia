# This file is a part of Julia. License is MIT: http://julialang.org/license

precompile(Tuple{typeof(Base.pointer), Array{UInt8, 1}, UInt64})
precompile(Tuple{typeof(Base.convert), Type{Ptr{Int32}}, Ptr{UInt8}})
precompile(Tuple{typeof(Base.SparseArrays.CHOLMOD.set_print_level), Array{UInt8, 1}, Int64})
precompile(Tuple{Type{Base.Multimedia.TextDisplay}, Base.TTY})
precompile(Tuple{typeof(Base._start)})
precompile(Tuple{typeof(Base.copy!), Array{String, 1}, Int64, Array{Any, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Int64, Union{Base.Distributed.Worker, Base.Distributed.LocalProcess}}})
precompile(Tuple{typeof(Base.Distributed.init_worker), String, Base.Distributed.DefaultClusterManager})
precompile(Tuple{typeof(Base.finalizer), Base.TCPServer, typeof(Base.uvfinalize)})
precompile(Tuple{Type{Base.TCPServer}, Ptr{Void}, Int64})
precompile(Tuple{typeof(Base.print), Base.AbstractIOBuffer{Array{UInt8, 1}}, Base.Libc.RawFD})
precompile(Tuple{typeof(Base.uv_status_string), Base.TCPServer})
precompile(Tuple{typeof(Base._fd), Base.TCPServer})
precompile(Tuple{typeof(Base.print), Base.AbstractIOBuffer{Array{UInt8, 1}}, Base.TCPServer})
precompile(Tuple{typeof(Base.isopen), Base.TCPServer})
precompile(Tuple{typeof(Base.check_open), Base.TCPServer})
precompile(Tuple{typeof(Base.unpreserve_handle), Base.TCPServer})
precompile(Tuple{typeof(Base.stream_wait), Base.TCPServer, Base.Condition})
precompile(Tuple{Type{Base.TCPServer}})
precompile(Tuple{typeof(Base.close), Base.TCPServer})
precompile(Tuple{getfield(Base, Symbol("#kw##listen")), Array{Any, 1}, typeof(Base.listen), Base.TCPServer})
precompile(Tuple{getfield(Base, Symbol("#kw##listen")), Array{Any, 1}, typeof(Base.listen), Base.InetAddr{Base.IPv4}})
precompile(Tuple{typeof(Base.listenany), Base.IPv4, UInt16})
precompile(Tuple{typeof(Base.Distributed.check_master_connect)})
precompile(Tuple{typeof(Base.rstrip), Base.SubString{String}, Array{Char, 1}})
precompile(Tuple{typeof(Base.lstrip), Base.SubString{String}, Array{Char, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##split")), Array{Any, 1}, typeof(Base.split), String, Char})
precompile(Tuple{getfield(Base, Symbol("#kw##split")), Array{Any, 1}, typeof(Base.split), Base.SubString{String}, Char})
precompile(Tuple{typeof(Base.map!), typeof(Base.strip), Array{Base.SubString{String}, 1}, Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.UTF8proc.isnumber), Base.SubString{String}})
precompile(Tuple{getfield(Base.Distributed, Symbol("#kw##addprocs_locked")), Array{Any, 1}, typeof(Base.Distributed.addprocs_locked), Base.Distributed.SSHManager})
precompile(Tuple{Type{Base.Distributed.SSHManager}, Array{Any, 1}})
precompile(Tuple{getfield(Base.Distributed, Symbol("#kw##addprocs")), Array{Any, 1}, typeof(Base.Distributed.addprocs), Base.Distributed.SSHManager})
precompile(Tuple{typeof(Base.load_machine_file), String})
precompile(Tuple{typeof(Base.load_juliarc)})
precompile(Tuple{typeof(Base.shift!), Array{String, 1}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{String}, Tuple{String}}})
precompile(Tuple{typeof(Base.uv_status_string), Base.TTY})
precompile(Tuple{typeof(Base._fd), Base.TTY})
precompile(Tuple{typeof(Base.print), Base.AbstractIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(Base.isopen), Base.TTY})
precompile(Tuple{typeof(Base.check_open), Base.TTY})
precompile(Tuple{typeof(Base.uv_write), Base.TTY, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.flush), Base.TTY})
precompile(Tuple{typeof(Base.unsafe_write), Base.TTY, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.write), Base.Terminals.TTYTerminal, String})
precompile(Tuple{typeof(Base.banner), Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.answer_color)})
precompile(Tuple{typeof(Base.input_color)})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Tuple{}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{Type{Base.Channel{Any}}, Int64})
precompile(Tuple{typeof(Base.notify), Base.Condition, Tuple{Void, Int64}, Bool, Bool})
precompile(Tuple{typeof(Base.splice!), Array{Base.Multimedia.Display, 1}, Int64, Array{Any, 1}})
precompile(Tuple{typeof(Base.Multimedia.popdisplay), Base.REPL.REPLDisplay{Base.REPL.StreamREPL}})
precompile(Tuple{typeof(Base._setindex!), Base.Dict{Symbol, Any}, Base.LineEdit.Prompt, Symbol, Int64})
precompile(Tuple{typeof(Base.sizehint!), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.LineEdit.Prompt, Symbol})
precompile(Tuple{typeof(Base.copy!), Base.IndexLinear, Array{Symbol, 1}, Base.IndexLinear, Array{UInt8, 1}})
precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, typeof(Core.Inference.abstract_eval_constant), Tuple{Void}})
precompile(Tuple{Type{Core.Inference.Generator{Tuple{Void}, typeof(Core.Inference.abstract_eval_constant)}}, typeof(Core.Inference.abstract_eval_constant), Tuple{Void}})
precompile(Tuple{typeof(Core.Inference.convert), Type{Tuple{Void}}, Tuple{Void}})
precompile(Tuple{typeof(Core.Inference.iteratorsize), Type{Core.Inference.Generator{Tuple{Void}, typeof(Core.Inference.abstract_eval_constant)}}})
precompile(Tuple{typeof(Core.Inference.iteratorsize), Type{Tuple{Void}}})
precompile(Tuple{typeof(Core.Inference._collect), Type{Any}, Core.Inference.Generator{Tuple{Void}, typeof(Core.Inference.abstract_eval_constant)}, Core.Inference.HasLength})
precompile(Tuple{typeof(Core.Inference.length), Core.Inference.Generator{Tuple{Void}, typeof(Core.Inference.abstract_eval_constant)}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{Void}})
precompile(Tuple{typeof(Core.Inference.copy!), Array{Any, 1}, Core.Inference.Generator{Tuple{Void}, typeof(Core.Inference.abstract_eval_constant)}})
precompile(Tuple{typeof(Core.Inference.start), Core.Inference.Generator{Tuple{Void}, typeof(Core.Inference.abstract_eval_constant)}})
precompile(Tuple{typeof(Core.Inference.start), Tuple{Void}})
precompile(Tuple{typeof(Core.Inference.done), Core.Inference.Generator{Tuple{Void}, typeof(Core.Inference.abstract_eval_constant)}, Int64})
precompile(Tuple{typeof(Core.Inference.done), Tuple{Void}, Int64})
precompile(Tuple{typeof(Core.Inference.next), Core.Inference.Generator{Tuple{Void}, typeof(Core.Inference.abstract_eval_constant)}, Int64})
precompile(Tuple{typeof(Core.Inference.next), Tuple{Void}, Int64})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Void}, Int64})
precompile(Tuple{typeof(Base.join), Base.AbstractIOBuffer{Array{UInt8, 1}}, Array{String, 1}, Char})
precompile(Tuple{typeof(Base.:(==)), Void, String})
precompile(Tuple{Type{Symbol}, Void})
precompile(Tuple{typeof(Base.LineEdit.getEntry), Base.Dict{Char, Any}, Char})
precompile(Tuple{typeof(Base.LineEdit.getEntry), Base.Dict{Char, Any}, String})
precompile(Tuple{typeof(Base.unsafe_copy!), Array{Base.Dict{Any, Any}, 1}, Int64, Array{Base.Dict{Any, Any}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copy!), Array{Base.Dict{Any, Any}, 1}, Int64, Array{Base.Dict{Any, Any}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.promote_type), Type{Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}}, Type{Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}}})
precompile(Tuple{typeof(Base.promote_rule), Type{Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}}, Type{Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}}})
precompile(Tuple{typeof(Base.promote_rule), Type{Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}}, Type{Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}}})
precompile(Tuple{typeof(Base.promote_result), Type{Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}}, Type{Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}}, Type{Union{}}, Type{Union{}}})
precompile(Tuple{typeof(Base.promote_type), Type{Base.LineEdit.Prompt}, Type{Base.LineEdit.TextInterface}})
precompile(Tuple{typeof(Base.promote_rule), Type{Base.LineEdit.Prompt}, Type{Base.LineEdit.TextInterface}})
precompile(Tuple{typeof(Base.promote_rule), Type{Base.LineEdit.TextInterface}, Type{Base.LineEdit.Prompt}})
precompile(Tuple{typeof(Base.promote_result), Type{Base.LineEdit.Prompt}, Type{Base.LineEdit.TextInterface}, Type{Union{}}, Type{Union{}}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.LineEdit.TextInterface, 1}, Base.LineEdit.Prompt, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.LineEdit.TextInterface, 1}, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.LineEdit.TextInterface, 1}, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}, Int64})
precompile(Tuple{typeof(Base.copy!), Array{Base.LineEdit.TextInterface, 1}, Tuple{Base.LineEdit.Prompt, Base.LineEdit.Prompt, Base.LineEdit.Prompt, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}}})
precompile(Tuple{typeof(Base.Terminals.cmove_up), Base.Terminals.TerminalBuffer, Int64})
precompile(Tuple{typeof(Base.Terminals.cmove_down), Base.Terminals.TerminalBuffer, Int64})
precompile(Tuple{typeof(Base.Terminals.clear_line), Base.Terminals.TerminalBuffer})
precompile(Tuple{typeof(Base.write), Base.Terminals.TerminalBuffer, String})
precompile(Tuple{typeof(Base.LineEdit._clear_input_area), Base.Terminals.TerminalBuffer, Base.LineEdit.InputAreaState})
precompile(Tuple{typeof(Base.Terminals.cmove_col), Base.Terminals.TerminalBuffer, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##readline")), Array{Any, 1}, typeof(Base.readline), Base.Terminals.TerminalBuffer})
precompile(Tuple{typeof(Base.LineEdit.write_prompt), Base.Terminals.TerminalBuffer, Base.LineEdit.Prompt})
precompile(Tuple{getfield(Base.LineEdit, Symbol("#kw##refresh_multi_line")), Array{Any, 1}, typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.Terminals.TerminalBuffer, Base.Terminals.TerminalBuffer, Base.LineEdit.InputAreaState, String})
precompile(Tuple{typeof(Base.:(==)), Array{Char, 1}, Array{Char, 1}})
precompile(Tuple{typeof(Base.LineEdit.update_key_repeats), Base.LineEdit.MIState, Array{Char, 1}})
precompile(Tuple{typeof(Base.write), Base.Terminals.TerminalBuffer, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.LineEdit.keymap), Array{Base.Dict{Any, Any}, 1}})
precompile(Tuple{typeof(Base.LineEdit.add_specialisations), Base.Dict{Char, Any}, Base.Dict{Char, Any}, Int64})
precompile(Tuple{typeof(Base.LineEdit.keymap_merge), Base.Dict{Char, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.LineEdit.postprocess!), Base.Dict{Char, Any}})
precompile(Tuple{typeof(Base.LineEdit.keymap_unify), Array{Base.Dict{Any, Any}, 1}})
precompile(Tuple{typeof(Base.LineEdit.validate_keymap), Base.Dict{Char, Any}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), Array{Any, 1}, Type{Base.LineEdit.Prompt}, String})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Base.LineEdit.Prompt}, Base.Pair{Symbol, Base.LineEdit.Prompt}, Base.Pair{Symbol, Base.LineEdit.Prompt}})
precompile(Tuple{Type{Base.REPL.REPLHistoryProvider}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.REPL.find_hist_file)})
precompile(Tuple{typeof(Base.REPL.history_reset_state), Base.REPL.REPLHistoryProvider})
precompile(Tuple{typeof(Base.LineEdit.setup_search_keymap), Base.REPL.REPLHistoryProvider})
precompile(Tuple{typeof(Base.LineEdit.setup_prefix_keymap), Base.REPL.REPLHistoryProvider, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.getindex), Type{Base.Dict{Any, Any}}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.prepend!), Array{Base.Dict{Any, Any}, 1}, Array{Base.Dict{Any, Any}, 1}})
precompile(Tuple{typeof(Base.REPL.mode_keymap), Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.Multimedia.popdisplay), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}})
precompile(Tuple{typeof(Base.REPL.ends_with_semicolon), String})
precompile(Tuple{typeof(Base.Multimedia.popdisplay), Base.REPL.REPLDisplay{Base.REPL.BasicREPL}})
precompile(Tuple{typeof(Base.REPL.start_repl_backend), Base.Channel{Any}, Base.Channel{Any}})
precompile(Tuple{typeof(Base.append!), Array{String, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.process_options), Base.JLOptions})
precompile(Tuple{typeof(Base.Terminals.hascolor), Base.Terminals.TTYTerminal})
precompile(Tuple{Type{Base.REPL.LineEditREPL}, Base.Terminals.TTYTerminal, Bool})
precompile(Tuple{Type{Base.Terminals.TTYTerminal}, String, Base.TTY, Base.TTY, Base.IOStream})
precompile(Tuple{typeof(Base.yieldto), Task, Void})
precompile(Tuple{typeof(Base.Distributed.flush_gc_msgs)})
precompile(Tuple{Type{Base.REPL.REPLDisplay{R} where R<:Base.REPL.AbstractREPL}, Base.REPL.LineEditREPL})
precompile(Tuple{typeof(Base.__atreplinit), Base.REPL.LineEditREPL})
precompile(Tuple{typeof(Base.REPL.run_frontend), Base.REPL.LineEditREPL, Base.REPL.REPLBackendRef})
precompile(Tuple{typeof(Base.:(==)), Base.Multimedia.TextDisplay, Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}})
precompile(Tuple{typeof(Base.:(==)), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}, Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}})
precompile(Tuple{typeof(Base.REPL.hist_from_file), Base.REPL.REPLHistoryProvider, Base.IOStream, String})
precompile(Tuple{typeof(Base.seek), Base.IOStream, Int64})
precompile(Tuple{typeof(Base.REPL.hist_getline), Base.IOStream})
precompile(Tuple{typeof(Base.push!), Array{String, 1}, Base.SubString{String}})
precompile(Tuple{typeof(Base.seekend), Base.IOStream})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Char, Char})
precompile(Tuple{typeof(Base._setindex!), Base.Dict{Any, Any}, Char, Char, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.LineEdit.KeyAlias, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Char, String})
precompile(Tuple{typeof(Base._setindex!), Base.Dict{Any, Any}, Char, String, Int64})
precompile(Tuple{getfield(Base.LineEdit, Symbol("#kw##add_nested_key!")), Array{Any, 1}, typeof(Base.LineEdit.add_nested_key!), Base.Dict{Char, Any}, String, Void})
precompile(Tuple{getfield(Base.LineEdit, Symbol("#kw##add_nested_key!")), Array{Any, 1}, typeof(Base.LineEdit.add_nested_key!), Base.Dict{Char, Any}, String, Base.LineEdit.KeyAlias})
precompile(Tuple{typeof(Base.LineEdit.fixup_keymaps!), Base.Dict{Char, Any}, Int64, Char, Void})
precompile(Tuple{typeof(Base.LineEdit.run_interface), Base.Terminals.TTYTerminal, Base.LineEdit.ModalInterface})
precompile(Tuple{typeof(Base.displaysize), Base.TTY})
precompile(Tuple{typeof(Base.LineEdit.buffer), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.buffer), Base.LineEdit.PrefixSearchState})
precompile(Tuple{getfield(Base.LineEdit, Symbol("#kw##refresh_multi_line")), Array{Any, 1}, typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal, Base.AbstractIOBuffer{Array{UInt8, 1}}, Base.LineEdit.InputAreaState, Base.LineEdit.PromptState})
precompile(Tuple{getfield(Base.LineEdit, Symbol("#kw##refresh_multi_line")), Array{Any, 1}, typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal, Base.AbstractIOBuffer{Array{UInt8, 1}}, Base.LineEdit.InputAreaState, Base.LineEdit.PrefixSearchState})
precompile(Tuple{typeof(Base.write), Base.Terminals.TTYTerminal, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Terminals.enable_bracketed_paste), Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.Terminals.disable_bracketed_paste), Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.init_state), Base.Terminals.TTYTerminal, Base.LineEdit.ModalInterface})
precompile(Tuple{typeof(Base.LineEdit.prompt!), Base.Terminals.TTYTerminal, Base.LineEdit.ModalInterface, Base.LineEdit.MIState})
precompile(Tuple{typeof(Base.getindex), Array{Base.LineEdit.TextInterface, 1}, Int64})
precompile(Tuple{typeof(Base.start), Array{Base.LineEdit.TextInterface, 1}})
precompile(Tuple{typeof(Base.done), Array{Base.LineEdit.TextInterface, 1}, Int64})
precompile(Tuple{typeof(Base.next), Array{Base.LineEdit.TextInterface, 1}, Int64})
precompile(Tuple{typeof(Base.LineEdit.init_state), Base.Terminals.TTYTerminal, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.LineEdit.PromptState, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base._setindex!), Base.Dict{Any, Any}, Base.LineEdit.PromptState, Base.LineEdit.Prompt, Int64})
precompile(Tuple{typeof(Base.LineEdit.init_state), Base.Terminals.TTYTerminal, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.LineEdit.SearchState, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base._setindex!), Base.Dict{Any, Any}, Base.LineEdit.SearchState, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.LineEdit.init_state), Base.Terminals.TTYTerminal, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.LineEdit.PrefixSearchState, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base._setindex!), Base.Dict{Any, Any}, Base.LineEdit.PrefixSearchState, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.:(==)), Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}, Base.LineEdit.HistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.take!), Base.Channel{Any}})
precompile(Tuple{typeof(Base.n_avail), Base.Channel{Any}})
precompile(Tuple{typeof(Base.check_channel_state), Base.Channel{Any}})
precompile(Tuple{typeof(Base.wait), Base.Channel{Any}})
precompile(Tuple{typeof(Base.take_unbuffered), Base.Channel{Any}})
precompile(Tuple{typeof(Base.LineEdit.activate), Base.LineEdit.Prompt, Base.LineEdit.MIState, Base.Terminals.TTYTerminal, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.:(==)), Base.LineEdit.Prompt, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Any}, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.LineEdit.activate), Base.LineEdit.Prompt, Base.LineEdit.PromptState, Base.Terminals.TTYTerminal, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal, Base.LineEdit.PromptState})
precompile(Tuple{getfield(Base.LineEdit, Symbol("#kw##refresh_multi_line")), Array{Any, 1}, typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal, Base.LineEdit.PromptState})
precompile(Tuple{getfield(Base.LineEdit, Symbol("#kw##refresh_multi_line")), Array{Any, 1}, typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal, Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal, Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.keymap), Base.LineEdit.PromptState, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.LineEdit.match_input), Base.Dict{Char, Any}, Base.LineEdit.MIState})
precompile(Tuple{typeof(Base.LineEdit.match_input), Base.Dict{Char, Any}, Base.LineEdit.MIState, Base.AbstractIOBuffer{Array{UInt8, 1}}, Array{Char, 1}, Base.Dict{Char, Any}})
precompile(Tuple{typeof(Base.LineEdit.terminal), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.match_input), Base.Dict{Char, Any}, Base.LineEdit.MIState, Base.Terminals.TTYTerminal, Array{Char, 1}, Base.Dict{Char, Any}})
precompile(Tuple{typeof(Base.isreadable), Base.TTY})
precompile(Tuple{typeof(Base.start_reading), Base.TTY})
precompile(Tuple{typeof(Base.unpreserve_handle), Base.TTY})
precompile(Tuple{typeof(Base.wait_readnb), Base.TTY, Int64})
precompile(Tuple{typeof(Base.eof), Base.TTY})
precompile(Tuple{typeof(Base.read), Base.TTY, Type{UInt8}})
precompile(Tuple{typeof(Base.read), Base.Terminals.TTYTerminal, Type{Char}})
precompile(Tuple{typeof(Base.alloc_buf_hook), Base.TTY, UInt64})
precompile(Tuple{typeof(Base.LineEdit.keymap_data), Base.LineEdit.PromptState, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.deleteat!), Array{UInt8, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.splice!), Array{UInt8, 1}, Base.UnitRange{Int64}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.LineEdit.splice_buffer!), Base.AbstractIOBuffer{Array{UInt8, 1}}, Base.UnitRange{Int64}, String})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.edit_insert), Base.AbstractIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Base.LineEdit.edit_insert), Base.LineEdit.PromptState, String})
precompile(Tuple{typeof(Base.Terminals.width), Base.Terminals.TTYTerminal})
precompile(Tuple{Type{Base.Libc.TmStruct}, Float64})
precompile(Tuple{typeof(Base.Libc.strftime), String, Base.Libc.TmStruct})
precompile(Tuple{typeof(Base.REPL.mode_idx), Base.REPL.REPLHistoryProvider, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.LineEdit.commit_line), Base.LineEdit.MIState})
precompile(Tuple{typeof(Base.LineEdit.on_enter), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.REPL.return_callback), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TTYTerminal, Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.println), Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.unsafe_write), Base.TTY, Base.RefValue{UInt8}, Int64})
precompile(Tuple{typeof(Base.write), Base.Terminals.TTYTerminal, Char})
precompile(Tuple{typeof(Base.LineEdit.add_history), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.add_history), Base.REPL.REPLHistoryProvider, Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.start), Base.Pair{Symbol, Any}})
precompile(Tuple{typeof(Base.print), Base.IOStream, String})
precompile(Tuple{typeof(Base.flush), Base.IOStream})
precompile(Tuple{typeof(Base.convert), Type{Base.LineEdit.InputAreaState}, Base.LineEdit.InputAreaState})
precompile(Tuple{typeof(Base.LineEdit.mode), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.reset_state), Base.LineEdit.MIState})
precompile(Tuple{typeof(Base.REPL.reset), Base.REPL.LineEditREPL})
precompile(Tuple{typeof(Base.Terminals.raw!), Base.Terminals.TTYTerminal, Bool})
precompile(Tuple{typeof(Base.print), Base.Terminals.TTYTerminal, String})
precompile(Tuple{getfield(Base, Symbol("#kw##parse_input_line")), Array{Any, 1}, typeof(Base.parse_input_line), String})
precompile(Tuple{typeof(Base.REPL.send_to_backend), Expr, Base.Channel{Any}, Base.Channel{Any}})
precompile(Tuple{typeof(Base.notify), Base.Condition, Tuple{Expr, Int64}, Bool, Bool})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Expr, Int64}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Expr, Int64}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Expr, Int64}})
precompile(Tuple{typeof(Base.REPL.eval_user_input), Expr, Base.REPL.REPLBackend})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Int64, Void}})
precompile(Tuple{typeof(Base.notify), Base.Condition, Tuple{Int64, Void}, Bool, Bool})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Int64, Void}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Int64, Void}})
precompile(Tuple{typeof(Base.start), Tuple{Int64, Void}})
precompile(Tuple{typeof(Base.REPL.print_response), Base.REPL.LineEditREPL, Int64, Void, Bool, Bool})
precompile(Tuple{typeof(Base.REPL.print_response), Base.Terminals.TTYTerminal, Int64, Void, Bool, Bool, Void})
precompile(Tuple{typeof(Base.print), Base.Terminals.TTYTerminal, DataType})
precompile(Tuple{typeof(Base.print), Base.Terminals.TTYTerminal, Char})
precompile(Tuple{typeof(Base.print), Base.Terminals.TTYTerminal, String, DataType, String, Char})
precompile(Tuple{typeof(Base.print), Base.Terminals.TTYTerminal, String, Char})
precompile(Tuple{Type{Base.IOContext{Base.Terminals.TTYTerminal}}, Base.Terminals.TTYTerminal, Base.ImmutableDict{Symbol, Any}})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.Terminals.TTYTerminal}, String})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), Array{Any, 1}, typeof(Base.with_output_color), typeof(Base.print), Symbol, Base.IOContext{Base.Terminals.TTYTerminal}, String})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), Array{Any, 1}, typeof(Base.with_output_color), typeof(Base.print), Int64, Base.IOContext{Base.Terminals.TTYTerminal}, String})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.Terminals.TTYTerminal}, Symbol})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.Terminals.TTYTerminal}, Module})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.Terminals.TTYTerminal}, String})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.Terminals.TTYTerminal}, Module})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.Terminals.TTYTerminal}, Symbol})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.Terminals.TTYTerminal}, Int32})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.Terminals.TTYTerminal}, Int64})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.Terminals.TTYTerminal}, String, Int64, String})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.Terminals.TTYTerminal}, Char})
precompile(Tuple{typeof(Base.show_circular), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Any, 1}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Any, 1}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Any, 1}, Char, Char, Char, Bool})
precompile(Tuple{typeof(Base.join), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Any, 1}, String, String})
precompile(Tuple{typeof(Base.join), Base.IOContext{Base.Terminals.TTYTerminal}, Tuple{}, String, String})
precompile(Tuple{typeof(Base.show_method_params), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Any, 1}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.Terminals.TTYTerminal}, String, Module})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.Terminals.TTYTerminal}, String, Symbol, String, Int32})
precompile(Tuple{typeof(Base.show_lambda_types), Base.IOContext{Base.Terminals.TTYTerminal}, Core.MethodInstance})
precompile(Tuple{typeof(Base.print_with_color), Symbol, Base.IOContext{Base.Terminals.TTYTerminal}, String})
precompile(Tuple{typeof(Base.print_with_color), Int64, Base.IOContext{Base.Terminals.TTYTerminal}, String})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.Terminals.TTYTerminal}, Core.MethodInstance})
precompile(Tuple{typeof(Base.StackTraces.show_spec_linfo), Base.IOContext{Base.Terminals.TTYTerminal}, Base.StackTraces.StackFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##show")), Array{Any, 1}, typeof(Base.show), Base.IOContext{Base.Terminals.TTYTerminal}, Base.StackTraces.StackFrame})
precompile(Tuple{getfield(Base, Symbol("#kw##show_trace_entry")), Array{Any, 1}, typeof(Base.show_trace_entry), Base.IOContext{Base.Terminals.TTYTerminal}, Base.StackTraces.StackFrame, Int64})
precompile(Tuple{typeof(Base.show_backtrace), Base.Terminals.TTYTerminal, Array{Ptr{Void}, 1}})
precompile(Tuple{typeof(Base.Multimedia.display), Int64})
precompile(Tuple{typeof(Base.Multimedia.display), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}, Int64})
precompile(Tuple{Type{Base.MIME{Symbol("text/plain")}}})
precompile(Tuple{typeof(Base.Multimedia.display), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}, Base.MIME{Symbol("text/plain")}, Int64})
precompile(Tuple{typeof(Base.start), Base.Pair{Any, Any}})
precompile(Tuple{typeof(Base.LineEdit.reset_state), Base.LineEdit.SearchState})
precompile(Tuple{typeof(Base.LineEdit.reset_state), Base.REPL.REPLHistoryProvider})
precompile(Tuple{typeof(Base.LineEdit.reset_state), Base.LineEdit.PrefixSearchState})
precompile(Tuple{typeof(Base.LineEdit.reset_state), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Any, Any}, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.LineEdit.deactivate), Base.LineEdit.Prompt, Base.LineEdit.PromptState, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.activate), Base.LineEdit.Prompt, Base.LineEdit.PromptState, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.commit_changes), Base.Terminals.TTYTerminal, Base.Terminals.TerminalBuffer})
precompile(Tuple{typeof(Base.LineEdit.edit_move_up), Base.AbstractIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{Core.Inference.Const, Core.Inference.Const, Core.Inference.Const, DataType}})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{Core.Inference.Const, Core.Inference.Const, Core.Inference.Const, DataType}, Int64})
precompile(Tuple{typeof(Base.LineEdit.replace_line), Base.LineEdit.PrefixSearchState, String})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.LineEdit.PrefixSearchState})
precompile(Tuple{typeof(Base.copy), Base.AbstractIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.REPL.history_move), Base.LineEdit.PrefixSearchState, Base.REPL.REPLHistoryProvider, Int64, Int64})
precompile(Tuple{typeof(Base.LineEdit.edit_move_up), Base.LineEdit.MIState})
precompile(Tuple{typeof(Base.LineEdit.enter_prefix_search), Base.LineEdit.MIState, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}, Bool})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Any, Any}, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Any}, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.convert), Type{Base.LineEdit.Prompt}, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.LineEdit.copybuf!), Base.AbstractIOBuffer{Array{UInt8, 1}}, Base.AbstractIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.LineEdit.activate), Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}, Base.LineEdit.PrefixSearchState, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal, Base.LineEdit.PrefixSearchState})
precompile(Tuple{typeof(Base.LineEdit.history_prev_prefix), Base.LineEdit.PrefixSearchState, Base.REPL.REPLHistoryProvider, String})
precompile(Tuple{typeof(Base.REPL.history_move_prefix), Base.LineEdit.PrefixSearchState, Base.REPL.REPLHistoryProvider, String, Bool, Int64})
precompile(Tuple{typeof(Base.LineEdit.transition), Base.LineEdit.MIState, Base.LineEdit.Prompt})
precompile(Tuple{typeof(Base.LineEdit.terminal), Base.LineEdit.PrefixSearchState})
precompile(Tuple{typeof(Base.LineEdit.deactivate), Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}, Base.LineEdit.PrefixSearchState, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TTYTerminal, Base.LineEdit.PrefixSearchState})
precompile(Tuple{typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal, Base.LineEdit.PrefixSearchState})
precompile(Tuple{getfield(Base.LineEdit, Symbol("#kw##refresh_multi_line")), Array{Any, 1}, typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal, Base.LineEdit.PrefixSearchState})
precompile(Tuple{getfield(Base.LineEdit, Symbol("#kw##refresh_multi_line")), Array{Any, 1}, typeof(Base.LineEdit.refresh_multi_line), Base.Terminals.TerminalBuffer, Base.Terminals.TTYTerminal, Base.LineEdit.PrefixSearchState})
precompile(Tuple{typeof(Base.LineEdit.keymap), Base.LineEdit.PrefixSearchState, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.keymap_data), Base.LineEdit.PrefixSearchState, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.history_next_prefix), Base.LineEdit.PrefixSearchState, Base.REPL.REPLHistoryProvider, String})
precompile(Tuple{typeof(Base.LineEdit.accept_result), Base.LineEdit.MIState, Base.LineEdit.PrefixHistoryPrompt{Base.REPL.REPLHistoryProvider}})
precompile(Tuple{typeof(Base.LineEdit.replace_line), Base.LineEdit.PromptState, Base.AbstractIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.LineEdit.match_input), Base.Dict{Char, Any}, Base.LineEdit.MIState, Base.AbstractIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.LineEdit.char_move_left), Base.AbstractIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.LineEdit.char_move_word_left), Base.AbstractIOBuffer{Array{UInt8, 1}}, typeof(Base.LineEdit.is_non_word_char)})
precompile(Tuple{typeof(Base.LineEdit.edit_move_word_left), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.is_non_word_char), Char})
precompile(Tuple{typeof(Base.LineEdit.is_non_word_char), Bool})
precompile(Tuple{typeof(Base.LineEdit.char_move_word_right), Base.AbstractIOBuffer{Array{UInt8, 1}}, typeof(Base.LineEdit.is_non_word_char)})
precompile(Tuple{typeof(Base.LineEdit.edit_move_word_right), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.move_line_start), Base.LineEdit.MIState})
precompile(Tuple{typeof(Base.LineEdit.move_line_end), Base.AbstractIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.LineEdit.move_line_end), Base.LineEdit.MIState})
precompile(Tuple{typeof(Base.LineEdit.edit_move_down), Base.AbstractIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.LineEdit.edit_move_down), Base.LineEdit.MIState})
precompile(Tuple{typeof(Base.LineEdit.replace_line), Base.LineEdit.PrefixSearchState, Base.AbstractIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.Terminals.beep), Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.LineEdit.edit_kill_line), Base.LineEdit.MIState})
precompile(Tuple{typeof(Base.LineEdit.complete_line), Base.LineEdit.PromptState, Int64})
precompile(Tuple{typeof(Base.LineEdit.input_string_newlines_aftercursor), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.complete_line), Base.REPL.REPLCompletionProvider, Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.REPL.beforecursor), Base.AbstractIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.incomplete_tag), Symbol})
precompile(Tuple{typeof(Base.start), Tuple{Array{String, 1}, String, Bool}})
precompile(Tuple{typeof(Base.indexed_next), Tuple{Array{String, 1}, String, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.LineEdit.common_prefix), Array{String, 1}})
precompile(Tuple{typeof(Base.LineEdit.show_completions), Base.LineEdit.PromptState, Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{String, 1}, typeof(Base.length)}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{String, 1}, Base.Generator{Array{String, 1}, typeof(Base.length)}, Base.EltypeUnknown, Base.HasShape})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.scalarmax), Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.scalarmax), Base.IndexLinear, Array{Int64, 1}})
precompile(Tuple{typeof(Base.divrem), Int64, Int64})
precompile(Tuple{typeof(Base.Terminals.cmove_down), Base.Terminals.TTYTerminal, Int64})
precompile(Tuple{typeof(Base.Terminals.cmove_col), Base.Terminals.TTYTerminal, Int64})
precompile(Tuple{typeof(Base.LineEdit.match_input), Base.LineEdit.KeyAlias, Base.LineEdit.MIState, Base.Terminals.TTYTerminal, Array{Char, 1}, Base.Dict{Char, Any}})
precompile(Tuple{typeof(Base.LineEdit.edit_backspace), Base.AbstractIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.LineEdit.edit_backspace), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.methods), typeof(Base.cos)})
precompile(Tuple{typeof(Base.methods), typeof(Base.cos), Type{Tuple}})
precompile(Tuple{typeof(Base.getindex), SimpleVector, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.rewrap_unionall), Type{Tuple{typeof(Base.cos)}}, Type{Tuple{typeof(Base.cos), Base.MPFR.BigFloat}}})
precompile(Tuple{typeof(Base.argtype_decl), Base.ImmutableDict{Symbol, Any}, Symbol, Type{Tuple{typeof(Base.cos), Base.MPFR.BigFloat}}, Int64, Int32, Bool})
precompile(Tuple{getfield(Base, Symbol("#kw##print_to_string")), Array{Any, 1}, typeof(Base.print_to_string), Type{typeof(Base.cos)}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Type{typeof(Base.cos)}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, TypeVar})
precompile(Tuple{typeof(Base.in), Base.Pair{Symbol, TypeVar}, Base.ImmutableDict{Symbol, Any}, typeof(===)})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Type{Base.SparseArrays.SparseMatrixCSC{Tv, Ti} where Ti<:Integer where Tv}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Base.MethodError, Array{Ptr{Void}, 1}}})
precompile(Tuple{typeof(Base.notify), Base.Condition, Tuple{Base.MethodError, Array{Ptr{Void}, 1}}, Bool, Bool})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Base.MethodError, Array{Ptr{Void}, 1}}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Base.MethodError, Array{Ptr{Void}, 1}}})
precompile(Tuple{typeof(Base.start), Tuple{Base.MethodError, Array{Ptr{Void}, 1}}})
precompile(Tuple{typeof(Base.indexed_next), Tuple{Base.MethodError, Array{Ptr{Void}, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.REPL.print_response), Base.REPL.LineEditREPL, Base.MethodError, Array{Ptr{Void}, 1}, Bool, Bool})
precompile(Tuple{typeof(Base.REPL.print_response), Base.Terminals.TTYTerminal, Base.MethodError, Array{Ptr{Void}, 1}, Bool, Bool, Void})
precompile(Tuple{typeof(Base.display_error), Base.Terminals.TTYTerminal, Base.MethodError, Array{Ptr{Void}, 1}})
precompile(Tuple{typeof(Base._redirect), Base.Terminals.TTYTerminal, Base.Dict{Tuple{Union{Module, Void}, Union{Symbol, Void}}, IO}, Base.StackTraces.StackFrame})
precompile(Tuple{Type{Base.StackTraces.StackFrame}, Symbol, Symbol, Int64, Base.Nullable{Core.MethodInstance}, Bool, Bool, Ptr{Void}})
precompile(Tuple{typeof(Base.similar), Array{Ptr{Void}, 1}, Type{Array{Base.StackTraces.StackFrame, 1}}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Array{Base.StackTraces.StackFrame, 1}, 1}, Array{Base.StackTraces.StackFrame, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Base.StackTraces.StackFrame, 1}, 1}, Base.Generator{Array{Ptr{Void}, 1}, typeof(Base.StackTraces.lookup)}, Int64, Int64})
precompile(Tuple{typeof(Base.unsafe_copy!), Array{Array{Base.StackTraces.StackFrame, 1}, 1}, Int64, Array{Array{Base.StackTraces.StackFrame, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{getfield(Base, Symbol("#kw##print_with_color")), Array{Any, 1}, typeof(Base.print_with_color), Symbol, Base.Terminals.TTYTerminal, String})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), Array{Any, 1}, typeof(Base.with_output_color), typeof(Base.print), Symbol, Base.Terminals.TTYTerminal, String})
precompile(Tuple{typeof(Base.start), Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.Terminals.TTYTerminal, Symbol, Bool})
precompile(Tuple{typeof(Base.showerror), Base.IOContext{Base.Terminals.TTYTerminal}, Base.MethodError, Array{Ptr{Void}, 1}})
precompile(Tuple{typeof(Base.show_backtrace), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Ptr{Void}, 1}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, Char, Char, Bool})
precompile(Tuple{typeof(Base.join), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, String, String})
precompile(Tuple{typeof(Base.join), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Tuple{}, String, String})
precompile(Tuple{typeof(Base.show_method_params), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, String, Module})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, String, Symbol, String, Int32})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Method})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, String, Method})
precompile(Tuple{typeof(Base.deleteat!), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Core.Inference.Generator{I, F} where F where I}, typeof(Core.Inference.abstract_eval_constant), Tuple{typeof(Base.convert), typeof(Base.getindex), typeof(Base.setindex!)}})
precompile(Tuple{Type{Core.Inference.Generator{Tuple{typeof(Base.convert), typeof(Base.getindex), typeof(Base.setindex!)}, typeof(Core.Inference.abstract_eval_constant)}}, typeof(Core.Inference.abstract_eval_constant), Tuple{typeof(Base.convert), typeof(Base.getindex), typeof(Base.setindex!)}})
precompile(Tuple{typeof(Core.Inference.convert), Type{Tuple{typeof(Base.convert), typeof(Base.getindex), typeof(Base.setindex!)}}, Tuple{typeof(Base.convert), typeof(Base.getindex), typeof(Base.setindex!)}})
precompile(Tuple{typeof(Core.Inference.iteratorsize), Type{Core.Inference.Generator{Tuple{typeof(Base.convert), typeof(Base.getindex), typeof(Base.setindex!)}, typeof(Core.Inference.abstract_eval_constant)}}})
precompile(Tuple{typeof(Core.Inference.iteratorsize), Type{Tuple{typeof(Base.convert), typeof(Base.getindex), typeof(Base.setindex!)}}})
precompile(Tuple{typeof(Core.Inference._collect), Type{Any}, Core.Inference.Generator{Tuple{typeof(Base.convert), typeof(Base.getindex), typeof(Base.setindex!)}, typeof(Core.Inference.abstract_eval_constant)}, Core.Inference.HasLength})
precompile(Tuple{typeof(Core.Inference.length), Core.Inference.Generator{Tuple{typeof(Base.convert), typeof(Base.getindex), typeof(Base.setindex!)}, typeof(Core.Inference.abstract_eval_constant)}})
precompile(Tuple{typeof(Core.Inference.length), Tuple{typeof(Base.convert), typeof(Base.getindex), typeof(Base.setindex!)}})
precompile(Tuple{typeof(Core.Inference.copy!), Array{Any, 1}, Core.Inference.Generator{Tuple{typeof(Base.convert), typeof(Base.getindex), typeof(Base.setindex!)}, typeof(Core.Inference.abstract_eval_constant)}})
precompile(Tuple{typeof(Core.Inference.start), Core.Inference.Generator{Tuple{typeof(Base.convert), typeof(Base.getindex), typeof(Base.setindex!)}, typeof(Core.Inference.abstract_eval_constant)}})
precompile(Tuple{typeof(Core.Inference.start), Tuple{typeof(Base.convert), typeof(Base.getindex), typeof(Base.setindex!)}})
precompile(Tuple{typeof(Core.Inference.done), Core.Inference.Generator{Tuple{typeof(Base.convert), typeof(Base.getindex), typeof(Base.setindex!)}, typeof(Core.Inference.abstract_eval_constant)}, Int64})
precompile(Tuple{typeof(Core.Inference.done), Tuple{typeof(Base.convert), typeof(Base.getindex), typeof(Base.setindex!)}, Int64})
precompile(Tuple{typeof(Core.Inference.next), Core.Inference.Generator{Tuple{typeof(Base.convert), typeof(Base.getindex), typeof(Base.setindex!)}, typeof(Core.Inference.abstract_eval_constant)}, Int64})
precompile(Tuple{typeof(Core.Inference.next), Tuple{typeof(Base.convert), typeof(Base.getindex), typeof(Base.setindex!)}, Int64})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{typeof(Base.convert), typeof(Base.getindex), typeof(Base.setindex!)}, Int64})
precompile(Tuple{typeof(Core.Inference.start), Tuple{typeof(Base.convert), Int64}})
precompile(Tuple{typeof(Core.Inference.indexed_next), Tuple{typeof(Base.convert), Int64}, Int64, Int64})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{typeof(Base.convert), Int64}, Int64})
precompile(Tuple{typeof(Core.Inference.start), Tuple{typeof(Base.getindex), Int64}})
precompile(Tuple{typeof(Core.Inference.indexed_next), Tuple{typeof(Base.getindex), Int64}, Int64, Int64})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{typeof(Base.getindex), Int64}, Int64})
precompile(Tuple{typeof(Core.Inference.start), Tuple{typeof(Base.setindex!), Int64}})
precompile(Tuple{typeof(Core.Inference.indexed_next), Tuple{typeof(Base.setindex!), Int64}, Int64, Int64})
precompile(Tuple{typeof(Core.Inference.getindex), Tuple{typeof(Base.setindex!), Int64}, Int64})
precompile(Tuple{typeof(Base.promote_type), Type{typeof(Base.getindex)}, Type{typeof(Base.setindex!)}})
precompile(Tuple{typeof(Base.promote_rule), Type{typeof(Base.getindex)}, Type{typeof(Base.setindex!)}})
precompile(Tuple{typeof(Base.promote_rule), Type{typeof(Base.setindex!)}, Type{typeof(Base.getindex)}})
precompile(Tuple{typeof(Base.promote_result), Type{typeof(Base.getindex)}, Type{typeof(Base.setindex!)}, Type{Union{}}, Type{Union{}}})
precompile(Tuple{typeof(Base.promote_type), Type{typeof(Base.convert)}, Type{Function}})
precompile(Tuple{typeof(Base.promote_rule), Type{typeof(Base.convert)}, Type{Function}})
precompile(Tuple{typeof(Base.promote_rule), Type{Function}, Type{typeof(Base.convert)}})
precompile(Tuple{typeof(Base.promote_result), Type{typeof(Base.convert)}, Type{Function}, Type{Union{}}, Type{Union{}}})
precompile(Tuple{typeof(Base.copy!), Array{Function, 1}, Tuple{typeof(Base.convert), typeof(Base.getindex), typeof(Base.setindex!)}})
precompile(Tuple{typeof(Base.join), Base.AbstractIOBuffer{Array{UInt8, 1}}, Tuple{}, String})
precompile(Tuple{typeof(Base.join), Tuple{}, String})
precompile(Tuple{typeof(Base._redirect), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Base.Dict{Tuple{Union{Module, Void}, Union{Symbol, Void}}, IO}, Base.StackTraces.StackFrame})
precompile(Tuple{typeof(Base._redirect), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Base.Dict{Tuple{Union{Module, Void}, Union{Symbol, Void}}, IO}, Symbol})
precompile(Tuple{typeof(Base.first), Base.MethodList})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, String, DataType, String})
precompile(Tuple{typeof(Base.show_method_candidates), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Base.MethodError, Array{Any, 1}})
precompile(Tuple{typeof(Base.showerror), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Base.MethodError})
precompile(Tuple{typeof(Base.typesof), Int64, String})
precompile(Tuple{typeof(Base.methods_including_ambiguous), typeof(Base.:(+)), Type{Tuple{Int64, String}}})
precompile(Tuple{typeof(Base.:(==)), typeof(Base.:(+)), typeof(Base.convert)})
precompile(Tuple{typeof(Base.method_exists), typeof(Base.:(+)), Type{Tuple{Int64, String}}})
precompile(Tuple{typeof(Base.start), Tuple{Int64, String}})
precompile(Tuple{typeof(Base.start), Tuple{typeof(Base.:(+)), Array{Any, 1}}})
precompile(Tuple{typeof(Base.indexed_next), Tuple{typeof(Base.:(+)), Array{Any, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.string), TypeVar})
precompile(Tuple{typeof(Base.print), Base.AbstractIOBuffer{Array{UInt8, 1}}, TypeVar})
precompile(Tuple{typeof(Base.print), Base.AbstractIOBuffer{Array{UInt8, 1}}, Type{Union{UInt8, UInt16, UInt32, UInt64}}})
precompile(Tuple{typeof(Base.show), Base.AbstractIOBuffer{Array{UInt8, 1}}, Type{Union{UInt8, UInt16, UInt32, UInt64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##sort!")), Array{Any, 1}, typeof(Base.sort!), Array{Any, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Any, 1}, Base.Sort.MergeSortAlg, Base.Order.By{typeof(Base.string)}})
precompile(Tuple{typeof(Base.sort!), Array{Any, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{typeof(Base.string)}})
precompile(Tuple{typeof(Base.sort!), Array{Any, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{typeof(Base.string)}, Array{Any, 1}})
precompile(Tuple{typeof(Base.join), Base.AbstractIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol, Symbol, Symbol}, String})
precompile(Tuple{typeof(Base.join), Base.AbstractIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, String})
precompile(Tuple{typeof(Base.getindex), Tuple{typeof(Type), Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Tuple{Base.AbstractIOBuffer{Array{UInt8, 1}}, Int64}, Int64})
precompile(Tuple{typeof(Base.resize!), Array{Tuple{String, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.REPL.send_to_backend), Symbol, Base.Channel{Any}, Base.Channel{Any}})
precompile(Tuple{typeof(Base.notify), Base.Condition, Tuple{Symbol, Int64}, Bool, Bool})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Symbol, Int64}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Symbol, Int64}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Symbol, Int64}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{UndefVarError, Array{Ptr{Void}, 1}}})
precompile(Tuple{typeof(Base.notify), Base.Condition, Tuple{UndefVarError, Array{Ptr{Void}, 1}}, Bool, Bool})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{UndefVarError, Array{Ptr{Void}, 1}}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{UndefVarError, Array{Ptr{Void}, 1}}})
precompile(Tuple{typeof(Base.start), Tuple{UndefVarError, Array{Ptr{Void}, 1}}})
precompile(Tuple{typeof(Base.indexed_next), Tuple{UndefVarError, Array{Ptr{Void}, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.display_error), Base.Terminals.TTYTerminal, UndefVarError, Array{Ptr{Void}, 1}})
precompile(Tuple{typeof(Base.showerror), Base.IOContext{Base.Terminals.TTYTerminal}, UndefVarError, Array{Ptr{Void}, 1}})
precompile(Tuple{typeof(Base.showerror), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, ErrorException})
precompile(Tuple{typeof(Base.showerror), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, UndefVarError})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Array{Int64, 1}, Void}})
precompile(Tuple{typeof(Base.notify), Base.Condition, Tuple{Array{Int64, 1}, Void}, Bool, Bool})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Array{Int64, 1}, Void}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Array{Int64, 1}, Void}})
precompile(Tuple{typeof(Base.start), Tuple{Array{Int64, 1}, Void}})
precompile(Tuple{typeof(Base.indexed_next), Tuple{Array{Int64, 1}, Void}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), Array{Int64, 1}})
precompile(Tuple{typeof(Base.Multimedia.display), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Multimedia.display), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}, Base.MIME{Symbol("text/plain")}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 1}, String, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 1}, String, String, String, Bool})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.Terminals.TTYTerminal}, Char})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.Terminals.TTYTerminal}, String, Char})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.Terminals.TTYTerminal}, String, String})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.Terminals.TTYTerminal}, String, String, Char})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 1}, String, String})
precompile(Tuple{typeof(Base.print_matrix_repr), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.show_nd), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 1}, typeof(Base.print_matrix_repr), Bool})
precompile(Tuple{typeof(Base.repremptyarray), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.print_matrix), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 1}, String, String, String})
precompile(Tuple{typeof(Base.getindex), Base.ImmutableDict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.vcat), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Tuple{Int64, Int64}, 1}, typeof(Base.sum)}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Tuple{Int64, Int64}, 1}, Base.Generator{Array{Tuple{Int64, Int64}, 1}, typeof(Base.sum)}, Base.EltypeUnknown, Base.HasShape})
precompile(Tuple{typeof(Base.pop!), Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.reverse), Array{Tuple{Int64, Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.print_matrix_vdots), Base.IOContext{Base.Terminals.TTYTerminal}, String, Array{Tuple{Int64, Int64}, 1}, String, Int64, Int64})
precompile(Tuple{typeof(Base.print_matrix), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 1}, String, String, String, String, String, String, Int64, Int64})
precompile(Tuple{typeof(Base.alignment), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Int64, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##sprint")), Array{Any, 1}, typeof(Base.sprint), Int64, typeof(Base.show), Int64})
precompile(Tuple{typeof(Base.first), Array{Int64, 1}})
precompile(Tuple{typeof(Base.print_matrix_row), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 1}, Array{Tuple{Int64, Int64}, 1}, Int64, Array{Int64, 1}, String})
precompile(Tuple{typeof(Base.print), Base.AbstractIOBuffer{Array{UInt8, 1}}, String, Int64, String})
precompile(Tuple{typeof(Base.print), Base.AbstractIOBuffer{Array{UInt8, 1}}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.last), Array{Int64, 1}})
precompile(Tuple{typeof(Base.zeros), Int64, Int64})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{Float64, 2}})
precompile(Tuple{typeof(Base.fill!), Array{Float64, 2}, Float64})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Array{Float64, 2}, Void}})
precompile(Tuple{typeof(Base.notify), Base.Condition, Tuple{Array{Float64, 2}, Void}, Bool, Bool})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Array{Float64, 2}, Void}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Array{Float64, 2}, Void}})
precompile(Tuple{typeof(Base.start), Tuple{Array{Float64, 2}, Void}})
precompile(Tuple{typeof(Base.indexed_next), Tuple{Array{Float64, 2}, Void}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), Array{Float64, 2}})
precompile(Tuple{typeof(Base.isempty), Array{Float64, 2}})
precompile(Tuple{typeof(Base.isassigned), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.array_eltype_show_how), Array{Float64, 2}})
precompile(Tuple{typeof(Base.isassigned), Array{Float64, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.join), Base.AbstractIOBuffer{Array{UInt8, 1}}, Tuple{Int64, Int64}, Char})
precompile(Tuple{typeof(Base.summary), Array{Float64, 2}})
precompile(Tuple{typeof(Base.isassigned), Array{Float64, 2}})
precompile(Tuple{typeof(Base.Multimedia.display), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.Multimedia.display), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}, Base.MIME{Symbol("text/plain")}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.Grisu._show), Base.IOContext{Base.Terminals.TTYTerminal}, Float64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Float64, 2}, String, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Float64, 2}, String, String, String, Bool})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Float64, 2}, String, String})
precompile(Tuple{typeof(Base.print_matrix_repr), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.show_nd), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Float64, 2}, typeof(Base.print_matrix_repr), Bool})
precompile(Tuple{typeof(Base.repremptyarray), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.print_matrix), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Float64, 2}, String, String, String})
precompile(Tuple{typeof(Base.print_matrix), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Float64, 2}, String, String, String, String, String, String, Int64, Int64})
precompile(Tuple{typeof(Base.alignment), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Float64, 2}, Array{Int64, 1}, Array{Int64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.Grisu._show), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Float64, Int64, Int64, Bool, Bool})
precompile(Tuple{getfield(Base, Symbol("#kw##sprint")), Array{Any, 1}, typeof(Base.sprint), Int64, typeof(Base.show), Float64})
precompile(Tuple{typeof(Base.alignment), Base.IOContext{Base.Terminals.TTYTerminal}, Float64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.AbstractIOBuffer{Array{UInt8, 1}}}, Float64})
precompile(Tuple{typeof(Base.print_matrix_row), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Float64, 2}, Array{Tuple{Int64, Int64}, 1}, Int64, Array{Int64, 1}, String})
precompile(Tuple{typeof(Base.LineEdit.edit_move_left), Base.AbstractIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.LineEdit.edit_move_left), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.zeros), Type{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.fill!), Array{Int64, 2}, Int64})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{Int64, 2}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Array{Int64, 2}, Void}})
precompile(Tuple{typeof(Base.notify), Base.Condition, Tuple{Array{Int64, 2}, Void}, Bool, Bool})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Array{Int64, 2}, Void}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Array{Int64, 2}, Void}})
precompile(Tuple{typeof(Base.start), Tuple{Array{Int64, 2}, Void}})
precompile(Tuple{typeof(Base.indexed_next), Tuple{Array{Int64, 2}, Void}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), Array{Int64, 2}})
precompile(Tuple{typeof(Base.isempty), Array{Int64, 2}})
precompile(Tuple{typeof(Base.isassigned), Array{Int64, 2}, Int64})
precompile(Tuple{typeof(Base.array_eltype_show_how), Array{Int64, 2}})
precompile(Tuple{typeof(Base.isassigned), Array{Int64, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.summary), Array{Int64, 2}})
precompile(Tuple{typeof(Base.isassigned), Array{Int64, 2}})
precompile(Tuple{typeof(Base.Multimedia.display), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.Multimedia.display), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}, Base.MIME{Symbol("text/plain")}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 2}, String, String, String, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 2}, String, String, String, Bool})
precompile(Tuple{typeof(Base.show_vector), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 2}, String, String})
precompile(Tuple{typeof(Base.print_matrix_repr), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.show_nd), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 2}, typeof(Base.print_matrix_repr), Bool})
precompile(Tuple{typeof(Base.repremptyarray), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.print_matrix), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 2}, String, String, String})
precompile(Tuple{typeof(Base.print_matrix), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 2}, String, String, String, String, String, String, Int64, Int64})
precompile(Tuple{typeof(Base.alignment), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 2}, Array{Int64, 1}, Array{Int64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.print_matrix_row), Base.IOContext{Base.Terminals.TTYTerminal}, Array{Int64, 2}, Array{Tuple{Int64, Int64}, 1}, Int64, Array{Int64, 1}, String})
precompile(Tuple{typeof(Base.isempty), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.LineEdit.complete_line), Base.REPL.ShellCompletionProvider, Base.LineEdit.PromptState})
precompile(Tuple{getfield(Base.REPLCompletions, Symbol("#kw##complete_path")), Array{Any, 1}, typeof(Base.REPLCompletions.complete_path), String, Int64})
precompile(Tuple{typeof(Base.REPLCompletions.shell_completions), String, Int64})
precompile(Tuple{typeof(Base.LineEdit.default_enter_cb), Base.LineEdit.PromptState})
precompile(Tuple{typeof(Base.Docs.helpmode), String})
precompile(Tuple{typeof(Base.Docs.helpmode), Base.TTY, String})
precompile(Tuple{typeof(Base.Docs.repl), Base.TTY, Symbol})
precompile(Tuple{typeof(Base.Docs._repl), Symbol})
precompile(Tuple{typeof(Base.Docs.repl_latex), Base.TTY, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, String}, String})
precompile(Tuple{typeof(Base.print), Base.TTY, String})
precompile(Tuple{typeof(Base.write), Base.TTY, Char})
precompile(Tuple{typeof(Base.print), Base.TTY, Char, Char})
precompile(Tuple{typeof(Base.Docs.symbol_latex), String})
precompile(Tuple{typeof(Base.Docs.repl_search), Base.TTY, String})
precompile(Tuple{typeof(Base.print), Base.TTY, Char})
precompile(Tuple{typeof(Base.print), Base.TTY, String, Char})
precompile(Tuple{getfield(Base.Docs, Symbol("#kw##printmatches")), Array{Any, 1}, typeof(Base.Docs.printmatches), Base.TTY, String, Array{Any, 1}})
precompile(Tuple{typeof(Base.Docs.printmatch), Base.TTY, String, String})
precompile(Tuple{typeof(Base.Markdown.with_output_format), typeof(Base.print), Array{Symbol, 1}, Base.TTY, Char})
precompile(Tuple{Type{Base.Markdown.MD}, Base.Markdown.MD})
precompile(Tuple{typeof(Base.vcat), Base.Markdown.MD})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Base.Markdown.MD, Void}})
precompile(Tuple{typeof(Base.notify), Base.Condition, Tuple{Base.Markdown.MD, Void}, Bool, Bool})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Base.Markdown.MD, Void}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Base.Markdown.MD, Void}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{DataType, Void}})
precompile(Tuple{typeof(Base.start), Tuple{Base.Markdown.MD, Void}})
precompile(Tuple{typeof(Base.indexed_next), Tuple{Base.Markdown.MD, Void}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), Base.Markdown.MD})
precompile(Tuple{typeof(Base.Multimedia.display), Base.REPL.REPLDisplay{Base.REPL.LineEditREPL}, Base.Markdown.MD})
precompile(Tuple{typeof(Base.displaysize), Base.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.Markdown.term), Base.Terminals.TTYTerminal, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.Markdown.term), Base.Terminals.TTYTerminal, Base.Markdown.MD, Int64})
precompile(Tuple{typeof(Base.Markdown.term), Base.Terminals.TTYTerminal, Base.Markdown.Code, Int64})
precompile(Tuple{typeof(Base.write), Base.Terminals.TTYTerminal, Base.SubString{String}})
precompile(Tuple{typeof(Base.print), Base.Terminals.TTYTerminal, Base.SubString{String}})
precompile(Tuple{typeof(Base.print), Base.Terminals.TTYTerminal, Base.SubString{String}, Char})
precompile(Tuple{typeof(Base.Markdown.term), Base.Terminals.TTYTerminal, Base.Markdown.Paragraph, Int64})
precompile(Tuple{typeof(Base.LineEdit.edit_delete), Base.AbstractIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.print), String})
precompile(Tuple{typeof(Base._atexit)})
precompile(Tuple{typeof(Base.Distributed.terminate_all_workers)})
precompile(Tuple{typeof(Base.Distributed.local_remotecall_thunk), typeof(Base.exit), Tuple{}, Array{Any, 1}})
precompile(Tuple{typeof(Base.Distributed.remote_do), typeof(Base.exit), Base.Distributed.Worker})
precompile(Tuple{typeof(Base.Distributed.remote_do), typeof(Base.exit), Base.Distributed.LocalProcess})
precompile(Tuple{getfield(Base.Distributed, Symbol("#kw##remote_do")), Array{Any, 1}, typeof(Base.Distributed.remote_do), typeof(Base.exit), Base.Distributed.Worker})
precompile(Tuple{getfield(Base.Distributed, Symbol("#kw##remote_do")), Array{Any, 1}, typeof(Base.Distributed.remote_do), typeof(Base.exit), Base.Distributed.LocalProcess})
precompile(Tuple{typeof(Base.Distributed.set_worker_state), Base.Distributed.Worker, Base.Distributed.WorkerState})
precompile(Tuple{typeof(Base.Distributed.set_worker_state), Base.Distributed.LocalProcess, Base.Distributed.WorkerState})
precompile(Tuple{getfield(Base.Distributed, Symbol("#kw##rmprocs")), Array{Any, 1}, typeof(Base.Distributed.rmprocs), Array{Int64, 1}})
precompile(Tuple{typeof(Base.Distributed.interrupt), Array{Int64, 1}})
precompile(Tuple{typeof(Base.uvfinalize), Base.TTY})
precompile(Tuple{typeof(Base.stream_wait), Base.TTY, Base.Condition})
precompile(Tuple{typeof(Base.close), Base.TTY})
precompile(Tuple{typeof(Base.replace), String, Char, Char, Int64})
precompile(Tuple{typeof(Base.LineEdit.bracketed_paste), Base.LineEdit.MIState})
precompile(Tuple{typeof(Base.readuntil), Base.Terminals.TTYTerminal, String})
precompile(Tuple{typeof(Base.read), Base.TTY, Type{Char}})
precompile(Tuple{typeof(Base.readuntil), Base.TTY, String})
precompile(Tuple{typeof(Base.replace), String, Char, Char})
precompile(Tuple{typeof(Base.replace), String, Char, String, Int64})
precompile(Tuple{typeof(Base.endswith), String, Char})
precompile(Tuple{typeof(Base.LineEdit.replace_line), Base.LineEdit.PromptState, String})


# The following are intended to help speed Pkg.update()
precompile(Base.Pkg.Entry.update, (String,))
precompile(Base.Pkg.Query.prune_dependencies, (Dict{String, Base.Pkg.Types.VersionSet}, Dict{String, Dict{VersionNumber, Base.Pkg.Types.Available}}))
precompile(Base.Pkg.Read.installed_version, (String, Dict{VersionNumber, Base.Pkg.Types.Available}))
precompile(Base.Pkg.Resolve.resolve, (Dict{String, Base.Pkg.Types.VersionSet}, Dict{String, Dict{VersionNumber, Base.Pkg.Types.Available}}))
precompile(Base.Pkg.update, ())
precompile(Base.Sort.sort!, (Array{Any, 1}, Base.Sort.MergeSortAlg, Base.Order.ForwardOrdering))
precompile(Base.Sort.sort!, (Array{Any, 1}, Int, Int, Base.Sort.InsertionSortAlg, Base.Order.ForwardOrdering))
precompile(Base.Sort.sort!, (Array{Any,1},))
precompile(Base.Sort.sort!, (Array{VersionNumber, 1}, Int, Int, Base.Sort.InsertionSortAlg, Base.Order.ForwardOrdering))
precompile(Base.info, (String,))
precompile(Base.isempty, (Array{Void, 1},))
precompile(Base.setindex!, (Dict{String, VersionNumber}, VersionNumber, String))
precompile(Base.spawn, (Cmd, Tuple{Base.TTY, Base.TTY, Base.TTY}, Bool, Bool))
precompile(Base.spawn, (Cmd,))

# Speed up type inference in the post-Base world redefinition of convert
isdefined(Core, :Inference) && Base.code_typed(Base.code_typed)

# Speeding up addprocs for LocalManager
precompile(Base.Distributed.start_worker, ())
precompile(Base.Distributed.start_worker, (Base.TTY,))
precompile(Base.Distributed.process_messages, (Base.TCPSocket, Base.TCPSocket))
precompile(Base.Distributed.process_messages, (Base.TCPSocket, Base.TCPSocket, Void))
precompile(Base.Distributed.process_tcp_streams, (Base.TCPSocket, Base.TCPSocket, Void))
precompile(Base.Distributed.message_handler_loop, (Base.TCPSocket, Base.TCPSocket, Void))
precompile(Base.Distributed.connect_to_peer, (Base.Distributed.LocalManager, Int64, Base.Distributed.WorkerConfig))
precompile(Base.Distributed.connect, (Base.Distributed.LocalManager, Int64, Base.Distributed.WorkerConfig))
precompile(Base.Distributed.connect_w2w, (Int64, Base.Distributed.WorkerConfig))
precompile(Base.Distributed.connect_to_worker, (String, Int64))
precompile(Base.Distributed.addprocs, (Base.Distributed.LocalManager, ))
precompile(Base.Distributed.addprocs, (Int, ))
precompile(Base.Distributed.setup_launched_worker, (Base.Distributed.LocalManager, Dict, Base.Distributed.WorkerConfig, Array{Int,1}))
precompile(Base.Distributed.create_worker, (Base.Distributed.LocalManager, Dict, Base.Distributed.WorkerConfig))
precompile(Base.Distributed.launch, (Base.Distributed.LocalManager, Dict, Array{Base.Distributed.WorkerConfig, 1}, Base.Condition))
precompile(Base.Distributed.set_valid_processes, (Array{Int, 1}, ))

# Speed up repl help
sprint(Markdown.term, @doc mean)
sprint(Docs.repl_search, "mean")
sprint(Docs.repl_corrections, "meen")

# Speed up repl completions
Base.REPLCompletions.completions("IOBuffer().",11)
Base.REPLCompletions.completions("max([1],",8)
